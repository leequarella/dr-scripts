class Shape
  WORKING = Regexp.union([
    /The wood is ready to have more fine detail carved with a carving knife/,
    /Shaping with a wood shaper is needed to futher smooth the material's surface/,
    /A bulbous knot will make continued shaping difficult unless rubbed out with a rasp/,
    /you complete working/,
  ])

  WHATS_NEXT =  Regexp.union([
    /shaper/,
    /knife carving/,
    /carving with a knife/,
    /a rasp/,
  ])

  def initialize(product)
    @product = product
    fput "stow"
    waitrt?
    check = dothis("analyze my #{@product}", WHATS_NEXT)
    waitrt?
    make(first_step? check)
  end

  def make(next_step)
    check = dothis(next_step, WORKING)
    waitrt?
    fput "stow"
    next_step = next_step? check
    make(next_step) if next_step
  end

  def first_step? check
    if check =~ /shaper/
      shaper
    elsif check =~ /knife carving/ ||
    check =~ /carving with a knife/
      knife
    elsif check =~ /a rasp/
      rasp
    end
  end

  def next_step? check
    if check =~ /The wood is ready to have more fine detail carved with a carving knife/
      knife

    elsif check =~ /Shaping with a wood shaper is needed to futher smooth the material's surface/
      shaper

    elsif check =~ /A bulbous knot will make continued shaping difficult unless rubbed out with a rasp/
      rasp
    else
      bundle_with_logbook
      false
    end
  end

  def knife
    fput "get knife"
    verb = "carve my #{@product} with my knife"
  end

  def shaper
    fput "get shaper"
    verb = "shape my #{@product} with my shaper"
  end

  def rasp
    fput "get rasp"
    verb = "rub my #{@product} with my rasp"
  end

  def bundle_with_logbook
    fput "stow"
    fput "get log"
    fput "bund my #{@product} with my log"
  end
end

class StartShape
  STARTED = Regexp.union([
    /What were you referring to/,
    /You get/
  ])
  def initialize(product)
    @product = product
    check = dothis "get my #{@product}", STARTED
    next_step check
  end

  def next_step check
    if check =~ /What were you referring to/
      start
    end
  end

  def start
    fput 'get draw'
    waitrt?
    fput 'get lumb'
    waitrt?
    fput 'scrape lumb with draw'
    waitrt?
    fput 'stow'
    fput 'get lumb'
    fput 'stow'
  end
end

fput "stow left"
fput "stow right"
product = script.vars[1]
StartShape.new(product)
Shape.new(product)

#This work order appears to be complete
