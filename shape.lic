class Shape
  WORKING = Regexp.union([
    /carving knife/,
    /Shaping with a wood shaper is needed/,
    /A bulbous knot will make continued shaping difficult unless rubbed out with a rasp/,
    /you complete working/,
    /clamps/,
    /wood stain/,
    /assemble/,
  ])

  WHATS_NEXT =  Regexp.union([
    /shaper/,
    /knife/,
    /a rasp/,
    /clamps/,
  ])

  def initialize(product)
    @product = product
    fput "stow"
    waitrt?
    check = dothis("analyze my #{@product}", WHATS_NEXT)
    pause 0.25
    waitrt?
    make(first_step? check)
  end

  def make(next_step)
    check = dothis(next_step, WORKING)
    waitrt?
    fput "stow"
    next_step = next_step? check
    make(next_step) if next_step
  end

  def first_step? check
    if check =~ /shaper/
      shaper
    elsif check =~ /knife/
      knife
    elsif check =~ /a rasp/
      rasp
    end
  end

  def next_step? check
    if check =~ /carving knife/
      knife

    elsif check =~ /clamps/
      clamps

    elsif check =~ /Shaping with a wood shaper is needed/
      shaper

    elsif check =~ /A bulbous knot will make continued shaping difficult unless rubbed out with a rasp/
      rasp

    elsif check =~ /wood stain/
      finish_bow
      false

    else
      bundle_with_logbook
      false
    end
  end

  def knife
    fput "get knife"
    verb = "carve my #{@product} with my knife"
  end

  def shaper
    fput "get shaper"
    verb = "shape my #{@product} with my shaper"
  end

  def rasp
    fput "get rasp"
    verb = "rub my #{@product} with my rasp"
  end

  def clamps
    fput "get clamps"
    verb = "push my #{@product} with my clamps"
  end

  def finish_bow
    fput "buy string from crate"
    fput "assemble #{@product} with my string"
    waitrt?
    fput "get my stain"
    fput "apply my stain to my #{@product}"
    pause 0.2
    waitrt?
    fput "stow"
    waitrt?
    bundle_with_logbook
  end

  def bundle_with_logbook
    fput "stow"
    fput "get log"
    fput "bund my #{@product} with my log"
  end
end

class StartShape
  STARTED = Regexp.union([
    /What were you referring to/,
    /You get/
  ])
  def initialize(product)
    @product = product
    check = dothis "get my #{@product}", STARTED
    fput "swap"
    next_step check
  end

  def next_step check
    if check =~ /What were you referring to/
      start
    end
  end

  def start
    study_book
    fput 'get draw'
    waitrt?
    fput 'get lumb'
    waitrt?
    fput 'scrape lumb with draw'
    waitrt?
    fput 'stow'
    fput 'get lumb'
    fput 'stow'
  end

  def study_book
    fput "get my book"
    fput "study my book"
    pause 0.2
    waitrt?
    fput "stow my book"
  end
end

product = script.vars[1]

quantity = script.vars[2].nil? ? 1 : script.vars[2].to_i

quantity.times do
  fput "stow left"
  fput "stow right"
  StartShape.new(product)
  Shape.new(product)
end

#This work order appears to be complete
