class Shape
  WORKING = Regexp.union([
    /The wood is ready to have more fine detail carved with a carving knife/,
    /Shaping with a wood shaper is needed to futher smooth the material's surface/,
    /A bulbous knot will make continued shaping difficult unless rubbed out with a rasp/,
  ])

  WHATS_NEXT =  Regexp.union([
    /shaper/,
    /knife carving/,
    /a rasp/,
  ])

  def initialize(product)
    @product = product
    check = dothis("analyze #{@product}", WHATS_NEXT)
    waitrt?
    make(first_step? check)
  end

  def make(next_step)
    check = dothis(next_step, WORKING)
    waitrt?
    fput "stow"
    next_step = next_step? check
    make(next_step) if next_step
  end

  def first_step? check
    if check =~ /shaper/
      shaper
    elsif check =~ /knife carving/
      knife
    elsif check =~ /a rasp/
      rasp
    end
  end

  def next_step? check
    if check =~ /The wood is ready to have more fine detail carved with a carving knife/
      knife

    elsif check =~ /Shaping with a wood shaper is needed to futher smooth the material's surface/
      shaper

    elsif check =~ /A bulbous knot will make continued shaping difficult unless rubbed out with a rasp/
      rasp
    else
      false
    end
  end

  def knife
    fput "get knife"
    verb = "carve #{@product} with knife"
  end

  def shaper
    fput "get shaper"
    verb = "shape #{@product} with shaper"
  end

  def rasp
    fput "get rasp"
    verb = "rub #{@product} with rasp"
  end
end

product = script.vars[1]
Shape.new(product)
